class Solution {
    public int[] twoSum(int[] nums, int target) {
        // Create an array of pairs where each pair contains the number and its original index
        int[][] numWithIndex = new int[nums.length][2];
        for (int i = 0; i < nums.length; i++) {
            numWithIndex[i][0] = nums[i];
            numWithIndex[i][1] = i;
        }

        // Sort the array based on the numbers
        Arrays.sort(numWithIndex, (a, b) -> Integer.compare(a[0], b[0]));

        // Initialize two pointers
        int left = 0;
        int right = nums.length - 1;

        // Use two-pointer technique to find the two numbers that add up to the target
        while (left < right) {
            int sum = numWithIndex[left][0] + numWithIndex[right][0];
            if (sum == target) {
                // Return the original indices of the two numbers
                return new int[] { numWithIndex[left][1], numWithIndex[right][1] };
            } else if (sum < target) {
                left++;
            } else {
                right--;
            }
        }

        // Throw an exception if no solution is found (though the problem guarantees there is one)
        throw new IllegalArgumentException("No two sum solution");
    }
}
