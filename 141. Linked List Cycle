/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */

public class Solution {

    public boolean hasCycle(ListNode head) {
        // Floyd's Cycle Detection Algorithm (Tortoise and Hare)
        if (head == null || head.next == null) {
            return false; // No cycle if list is empty or has only one node
        }

        ListNode slow = head;
        ListNode fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;       // Move slow pointer by 1 step
            fast = fast.next.next;  // Move fast pointer by 2 steps

            if (slow == fast) {
                return true; // Cycle detected
            }
        }
        return false; // No cycle detected
    }

    public static void main(String[] args) {
        Solution sol = new Solution();

        // Test case 1: Cycle exists
        ListNode head1 = new ListNode(3);
        head1.next = new ListNode(2);
        head1.next.next = new ListNode(0);
        head1.next.next.next = new ListNode(-4);
        head1.next.next.next.next = head1.next; // Create a cycle

        System.out.println(sol.hasCycle(head1)); // Output: true

        // Test case 2: No cycle
        ListNode head2 = new ListNode(1);
        head2.next = new ListNode(2);
        head2.next.next = null; // No cycle

        System.out.println(sol.hasCycle(head2)); // Output: false

        // Test case 3: Single node with no cycle
        ListNode head3 = new ListNode(1);
        head3.next = null; // Single node

        System.out.println(sol.hasCycle(head3)); // Output: false
    }
}
