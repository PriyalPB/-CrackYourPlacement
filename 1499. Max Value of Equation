
public class MaxValueOfEquation {
    public static void main(String[] args) {
        int[][] points = {{1, 3}, {2, 0}, {3, 10}, {4, 5}, {5, 8}};
        int k = 2;
        System.out.println(findMaxValueOfEquation(points, k)); // Output should be 13
    }

    public static int findMaxValueOfEquation(int[][] points, int k) {
        int maxValue = Integer.MIN_VALUE;
        Deque<int[]> deque = new LinkedList<>(); // stores (x_i, y_i - x_i)

        for (int[] point : points) {
            int x = point[0], y = point[1];

            // Remove points from the deque where the difference is greater than k
            while (!deque.isEmpty() && x - deque.peekFirst()[0] > k) {
                deque.pollFirst();
            }

            // If the deque is not empty, calculate the max value
            if (!deque.isEmpty()) {
                maxValue = Math.max(maxValue, y + x + deque.peekFirst()[1]);
            }

            // Maintain the deque in decreasing order of y_i - x_i values
            while (!deque.isEmpty() && y - x >= deque.peekLast()[1]) {
                deque.pollLast();
            }

            // Add the current point to the deque
            deque.addLast(new int[]{x, y - x});
        }

        return maxValue;
    }
}
