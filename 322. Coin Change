//Hard Coded
public class CoinChange {
     public static int changeCoin(int coins[],int sum){
        int n = coins.length;
        int dp[][]= new int[n+1][sum+1];

        //initialization - sum is 0
        //i-> col   j->sum/change
        for(int i=0;i<n+1;i++){
            dp[i][0]=1;
        }
        for(int j=0;j<sum+1;j++){
            dp[0][j]=0;
        }

        for(int i=1;i<n+1;i++){
            for(int j=1;j<sum+1;j++){
                if(coins[i-1]<=j){  //valid
                    dp[i][j]=dp[i][j-coins[i-1]]+dp[i-1][j];
                }else{  //invalid
                   dp[i][j]=dp[i-1][j];
                }
            }
        }
        return dp[n][sum];
     }
    public static void main(String[] args) {
        int coins[] = {2,3,5,6};
        int sum = 10 ;       //ans 4 ways
        System.out.println(changeCoin(coins, sum));
     }
}

//User Defined
class Solution {
    public static int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int[] dp = new int[amount + 1];
        
        // Initialize dp array
        for (int i = 0; i <= amount; i++) {
            dp[i] = amount + 1; // Initialize with a value larger than any possible amount
        }
        dp[0] = 0; // Base case: 0 coins are needed to make amount 0
        
        for (int i = 1; i <= n; i++) {
            for (int j = coins[i - 1]; j <= amount; j++) {
                dp[j] = Math.min(dp[j], dp[j - coins[i - 1]] + 1);
            }
        }
        
        return dp[amount] > amount ? -1 : dp[amount]; // If dp[amount] is not updated, return -1
    }
    
    public static void main(String[] args) {
        int coins[] = {1, 2, 5};
        int amount = 11;
        System.out.println(coinChange(coins, amount)); // Expected output: 3 (11 = 5 + 5 + 1)
    }
}

