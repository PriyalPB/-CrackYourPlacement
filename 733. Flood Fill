public class FloodFill {
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {
        int originalColor = image[sr][sc];
        // If the original color is the same as the new color, no need to proceed
        if (originalColor != newColor) {
            dfs(image, sr, sc, originalColor, newColor);
        }
        return image;
    }

    private void dfs(int[][] image, int sr, int sc, int originalColor, int newColor) {
        // Check if the current position is out of bounds or not of the original color
        if (sr < 0 || sr >= image.length || sc < 0 || sc >= image[0].length || image[sr][sc] != originalColor) {
            return;
        }

        // Change the color of the current pixel
        image[sr][sc] = newColor;

        // Recursively call DFS for the 4 connected pixels (up, down, left, right)
        dfs(image, sr + 1, sc, originalColor, newColor);
        dfs(image, sr - 1, sc, originalColor, newColor);
        dfs(image, sr, sc + 1, originalColor, newColor);
        dfs(image, sr, sc - 1, originalColor, newColor);
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        int[][] image1 = {
            {1, 1, 1},
            {1, 1, 0},
            {1, 0, 1}
        };
        int sr1 = 1, sc1 = 1, newColor1 = 2;
        int[][] result1 = solution.floodFill(image1, sr1, sc1, newColor1);
        System.out.println("Flood Fill Result:");
        printImage(result1);

        int[][] image2 = {
            {0, 0, 0},
            {0, 1, 1}
        };
        int sr2 = 1, sc2 = 1, newColor2 = 1;
        int[][] result2 = solution.floodFill(image2, sr2, sc2, newColor2);
        System.out.println("Flood Fill Result:");
        printImage(result2);
    }

    private static void printImage(int[][] image) {
        for (int[] row : image) {
            for (int pixel : row) {
                System.out.print(pixel + " ");
            }
            System.out.println();
        }
    }
}
