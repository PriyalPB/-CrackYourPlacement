public class DecodeWays {

        public static int numDecodings(String s) {
            if (s == null || s.length() == 0 || s.charAt(0) == '0') {
                return 0;
            }
            
            int n = s.length();
            int[] dp = new int[n + 1];
            
            // Initialization
            dp[0] = 1; // Base case: empty string
            dp[1] = s.charAt(0) != '0' ? 1 : 0; // Single character string
            
            for (int i = 2; i <= n; i++) {
                int oneDigit = Integer.parseInt(s.substring(i - 1, i));
                int twoDigits = Integer.parseInt(s.substring(i - 2, i));
                
                // Check for valid single digit decode
                if (oneDigit >= 1 && oneDigit <= 9) {
                    dp[i] += dp[i - 1];
                }
                
                // Check for valid two digits decode
                if (twoDigits >= 10 && twoDigits <= 26) {
                    dp[i] += dp[i - 2];
                }
            }
            
            return dp[n];
        }
        public static void main(String[] args) {
            String s = "226";
            int result = numDecodings(s);
            System.out.println("Number of ways to decode: " + result);
        }
    }

