class Solution {
    public int shortestBridge(int[][] grid) {
        int n = grid.length;
        boolean found = false;
        Queue<int[]> queue = new LinkedList<>();
        boolean[][] visited = new boolean[n][n];

        // Step 1: Find the first island and mark it with BFS
        for (int i = 0; i < n; i++) {
            if (found) break;
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    dfs(grid, i, j, queue, visited);
                    found = true; // We only need to find the first island
                    break;
                }
            }
        }

        // Step 2: Perform BFS from all points of the first island
        int steps = 0;
        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};

        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int[] cell = queue.poll();
                for (int[] dir : directions) {
                    int x = cell[0] + dir[0];
                    int y = cell[1] + dir[1];
                    if (x >= 0 && x < n && y >= 0 && y < n && !visited[x][y]) {
                        if (grid[x][y] == 1) {
                            return steps; // Found the shortest bridge
                        }
                        queue.offer(new int[]{x, y});
                        visited[x][y] = true;
                    }
                }
            }
            steps++;
        }
        return -1; // Should never reach here
    }

    // Helper function to mark the first island and add its border to the queue
    private void dfs(int[][] grid, int x, int y, Queue<int[]> queue, boolean[][] visited) {
        int n = grid.length;
        if (x < 0 || x >= n || y < 0 || y >= n || grid[x][y] == 0 || visited[x][y]) {
            return;
        }
        visited[x][y] = true;
        queue.offer(new int[]{x, y}); // Add island cell to queue for BFS
        dfs(grid, x + 1, y, queue, visited);
        dfs(grid, x - 1, y, queue, visited);
        dfs(grid, x, y + 1, queue, visited);
        dfs(grid, x, y - 1, queue, visited);
    }
}
