import java.util.*;

class Solution {
    static ArrayList<ArrayList<Integer>> uniquePerms(ArrayList<Integer> arr, int n) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        Collections.sort(arr); // Sort the array to handle duplicates
        boolean[] used = new boolean[n]; // To keep track of used elements in permutations
        backtrack(arr, new ArrayList<>(), result, used);
        return result;
    }

    private static void backtrack(ArrayList<Integer> arr, ArrayList<Integer> current, 
                                  ArrayList<ArrayList<Integer>> result, boolean[] used) {
        if (current.size() == arr.size()) {
            result.add(new ArrayList<>(current)); // Found a valid permutation
            return;
        }

        for (int i = 0; i < arr.size(); i++) {
            // Skip duplicates
            if (used[i]) continue;
            if (i > 0 && arr.get(i) == arr.get(i - 1) && !used[i - 1]) continue;

            // Include this element in the current permutation
            used[i] = true;
            current.add(arr.get(i));

            backtrack(arr, current, result, used);

            // Backtrack
            used[i] = false;
            current.remove(current.size() - 1);
        }
    }

    public static void main(String[] args) {
        ArrayList<Integer> arr = new ArrayList<>(Arrays.asList(1, 1, 2));
        ArrayList<ArrayList<Integer>> permutations = uniquePerms(arr, arr.size());

        for (ArrayList<Integer> perm : permutations) {
            System.out.println(perm);
        }
    }
}
