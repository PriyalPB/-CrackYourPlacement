public class FindTheNumberOfIslandsUsingDFS {
    // Define directions for 8 possible movements (horizontal, vertical, and diagonal)
    private static final int[] rowNbr = {-1, -1, -1, 0, 0, 1, 1, 1};
    private static final int[] colNbr = {-1, 0, 1, -1, 1, -1, 0, 1};

    // Function to check if a given cell (row, col) is a valid cell to visit
    private static boolean isSafe(int[][] grid, boolean[][] visited, int row, int col) {
        return (row >= 0) && (row < grid.length) &&       // Check row bounds
               (col >= 0) && (col < grid[0].length) &&    // Check column bounds
               (grid[row][col] == 1) &&                   // Check if the cell is land
               (!visited[row][col]);                      // Check if the cell is not visited
    }

    // A utility function to perform DFS for a 2D boolean matrix. It only considers the 8 neighbors as adjacent vertices
    private static void DFS(int[][] grid, boolean[][] visited, int row, int col) {
        // Mark this cell as visited
        visited[row][col] = true;

        // Recur for all connected neighbors
        for (int k = 0; k < 8; k++) {
            int newRow = row + rowNbr[k];
            int newCol = col + colNbr[k];
            if (isSafe(grid, visited, newRow, newCol)) {
                DFS(grid, visited, newRow, newCol);
            }
        }
    }

    // The main function to count the number of islands in a given boolean 2D matrix
    public static int countIslands(int[][] grid) {
        // Base case: If the grid is empty
        if (grid == null || grid.length == 0) {
            return 0;
        }

        // Initialize the visited array
        boolean[][] visited = new boolean[grid.length][grid[0].length];

        // Initialize count of islands
        int count = 0;

        // Traverse the 2D grid
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                // If a cell with value 1 is not visited yet, then a new island is found
                if (grid[i][j] == 1 && !visited[i][j]) {
                    // Visit all cells in this island and increment the island count
                    DFS(grid, visited, i, j);
                    count++;
                }
            }
        }

        // Return the number of islands
        return count;
    }

    public static void main(String[] args) {
        // Example usage
        int[][] grid = {
            {1, 1, 0, 0, 0},
            {0, 1, 0, 0, 1},
            {1, 0, 0, 1, 1},
            {0, 0, 0, 0, 0},
            {1, 0, 1, 0, 1}
        };

        System.out.println("Number of islands is: " + countIslands(grid)); // Output: 5
    }
}
