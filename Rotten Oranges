import java.util.LinkedList;
import java.util.Queue;

class Stack&Queue {
    // Directions array for 4-directional movement
    private static final int[][] DIRECTIONS = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    
    public int orangesRotting(int[][] grid) {
        int rows = grid.length;
        int cols = grid[0].length;
        Queue<int[]> queue = new LinkedList<>();
        int freshOranges = 0;
        
        // Initialize the queue with all rotten oranges and count fresh oranges
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                if (grid[r][c] == 2) {
                    queue.offer(new int[]{r, c});
                } else if (grid[r][c] == 1) {
                    freshOranges++;
                }
            }
        }
        
        // If there are no fresh oranges, return 0
        if (freshOranges == 0) {
            return 0;
        }
        
        int minutesElapsed = 0;
        
        // Perform BFS
        while (!queue.isEmpty()) {
            int size = queue.size();
            boolean hasRotten = false;
            
            for (int i = 0; i < size; i++) {
                int[] current = queue.poll();
                int currentRow = current[0];
                int currentCol = current[1];
                
                // Explore all 4-directionally adjacent cells
                for (int[] direction : DIRECTIONS) {
                    int newRow = currentRow + direction[0];
                    int newCol = currentCol + direction[1];
                    
                    // Check if the new position is within bounds and has a fresh orange
                    if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols && grid[newRow][newCol] == 1) {
                        // Rot the fresh orange
                        grid[newRow][newCol] = 2;
                        queue.offer(new int[]{newRow, newCol});
                        freshOranges--;
                        hasRotten = true;
                    }
                }
            }
            
            // If any orange has been rotten, increment minutes
            if (hasRotten) {
                minutesElapsed++;
            }
        }
        
        // If there are still fresh oranges left, return -1
        return freshOranges == 0 ? minutesElapsed : -1;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[][] grid1 = {{2, 1, 1}, {1, 1, 0}, {0, 1, 1}};
        System.out.println(solution.orangesRotting(grid1)); // Output: 4
        
        int[][] grid2 = {{2, 1, 1}, {0, 1, 1}, {1, 0, 1}};
        System.out.println(solution.orangesRotting(grid2)); // Output: -1
        
        int[][] grid3 = {{0, 2}};
        System.out.println(solution.orangesRotting(grid3)); // Output: 0
    }
}
